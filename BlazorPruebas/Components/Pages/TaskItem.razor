@page "/taskitem"
@rendermode InteractiveServer
@inject IJSRuntime JS


<PageTitle>TaskItem</PageTitle>

<div class="container">
    <h1>Lista de tareas -> @ItemList.Count(i => i.IsDone)/@ItemList.Count()</h1>

    <div class="input-area">
        <input placeholder="Nueva tarea" @bind="newItem" class="text-input" />
        <button class="btn blue" @onclick="AddItem">Agregar</button>
        <button class="btn red" @onclick="ClearAll">Eliminar todo</button>
    </div>

    <ul class="task-list">
        @foreach (var item in ItemList)
        {
            <li class="task-item">
                <input type="checkbox" checked="@item.IsDone" @onchange="(e) => OnCheckboxChanged(e, item)" />
                <input class="text-input small @(item.IsDone ? "done" : "")" @bind="item.Title" />
                <button class="btn small red" @onclick="() => RemoveItem(item)">❌</button>
            </li>
        }
    </ul>
</div>



<style>
    .container {
        text-align: center;
        max-width: 600px;
        margin: 2rem auto;
        padding: 1rem;
    }

    .input-area {
        margin-bottom: 1.5rem;
    }

    .task-list {
        list-style: none;
        padding: 0;
    }

    .task-item {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        margin-bottom: 0.5rem;
    }

    .text-input {
        padding: 0.5rem;
        border-radius: 6px;
        border: 1px solid #ccc;
        width: 60%;
    }

    .text-input.small {
        width: 40%;
    }

    .btn {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-weight: bold;
    }

    .btn.blue {
        background-color: #007bff;
        color: white;
    }

    .btn.red {
        background-color: #dc3545;
        color: white;
    }

    .btn.small {
        padding: 0.3rem 0.6rem;
    }

    .btn:hover {
        opacity: 0.9;
    }

    .done {
    text-decoration: line-through;
    color: #999;
}
</style>



@code {
    private List<ClassItem> ItemList = [];
    private string? newItem;
    private bool isJSInitialized = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isJSInitialized)
        {
            await LoadTasks();
            isJSInitialized = true;
            StateHasChanged(); // Forzar redibujado con datos cargados
        }
    }

    private async Task AddItem()
    {
        if (!string.IsNullOrWhiteSpace(newItem))
        {
            ItemList.Add(new ClassItem { Title = newItem });
            newItem = string.Empty;
            await SaveTasks();
        }
    }

    private async Task RemoveItem(ClassItem item)
    {
        ItemList.Remove(item);
        await SaveTasks();
    }


    private async Task ClearAll()
    {
        ItemList.Clear(); // Vaciar la lista en memoria
        await SaveTasks(); // Guardar la lista vacía en localStorage
        StateHasChanged(); // Forzar actualización de la UI
    }

    private async Task SaveTasks()
    {
        var json = System.Text.Json.JsonSerializer.Serialize(ItemList);
        await JS.InvokeVoidAsync("localStorage.setItem", "task", json);
    }

    private async Task LoadTasks()
    {
        var json = await JS.InvokeAsync<string>("localStorage.getItem", "task");
        if (!string.IsNullOrEmpty(json))
        {
            ItemList = System.Text.Json.JsonSerializer.Deserialize<List<ClassItem>>(json)??[];
        }
    }
    private async Task OnCheckboxChanged(ChangeEventArgs e, ClassItem item)
    {
        item.IsDone = (bool)e.Value!;
        await SaveTasks();
    }

}